name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - uses: actions/checkout@v4

      # 2. Set execute permission for gradlew
      - name: Set execute permission for gradlew
        run: chmod +x ./gradlew

      # 3. Set up JDK 17 for the Gradle build
      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: 8
          distribution: 'adopt'

      # 4. Build the JAR file using Gradle
      - name: Build with Gradle
        run: ./gradlew clean build

      # 5. Verify the JAR is created
      - name: List build/libs directory
        run: ls -la build/libs

      # 6 Copy text files to build/libs
      - name: Copy text files
        run: ./gradlew copyResources 

      # 7. Upload build artifacts (e.g., JAR file)
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact
          path: build/libs/**
      
      # 8. Run tests with Gradle
      - name: Test with Gradle
        run: ./gradlew test

      # 9. Upload test reports
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/test/**

      # 10. Run code coverage test
      - name: Generate code coverage report
        run: ./gradlew jacocoTestReport

      # 11. Upload code coverage report
      - name: Upload code coverage report
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: build/reports/jacoco/test/html/**

      - name: Run SonarQube analysis
        run: |
          if ! ./gradlew sonarqube; then
            echo "SonarQube analysis failed or is not available. Skipping..."
          fi

      # 12. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 14. Build Docker image
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/hotel-booking-system

      - name: Run image with container
        run: docker run -it --name hotel-booking-system-container ${{ secrets.DOCKER_USERNAME }}/hotel-booking-system

      - name: Generate deployment log
        run: docker logs hotel-booking-system-container > deployment.log

      - name: Upload deployment log
        uses: actions/upload-artifact@v4
        with:
          name: deployment-log
          path: deployment.log

     


